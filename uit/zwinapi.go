// mksyscall_windows.pl winapi.go
// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT

package uit

import (
	"unsafe"

	"github.com/alexbrainman/gowingui/winapi"
)

import "syscall"

var (
	modkernel32 = syscall.NewLazyDLL("kernel32.dll")
	moduser32   = syscall.NewLazyDLL("user32.dll")
	modcomctl32 = syscall.NewLazyDLL("comctl32.dll")
	modgdi32    = syscall.NewLazyDLL("gdi32.dll")

	procGetModuleHandleW     = modkernel32.NewProc("GetModuleHandleW")
	procCreateWindowExW      = moduser32.NewProc("CreateWindowExW")
	procGetCursorPos         = moduser32.NewProc("GetCursorPos")
	procGetClientRect        = moduser32.NewProc("GetClientRect")
	procGetWindowRect        = moduser32.NewProc("GetWindowRect")
	procMoveWindow           = moduser32.NewProc("MoveWindow")
	procInvalidateRect       = moduser32.NewProc("InvalidateRect")
	procMapWindowPoints      = moduser32.NewProc("MapWindowPoints")
	procGetWindowTextW       = moduser32.NewProc("GetWindowTextW")
	procGetWindowTextLengthW = moduser32.NewProc("GetWindowTextLengthW")
	procSetWindowTextW       = moduser32.NewProc("SetWindowTextW")
	procEnableWindow         = moduser32.NewProc("EnableWindow")
	procIsWindowEnabled      = moduser32.NewProc("IsWindowEnabled")
	procShowWindow           = moduser32.NewProc("ShowWindow")
	procIsWindowVisible      = moduser32.NewProc("IsWindowVisible")
	procLoadIconW            = moduser32.NewProc("LoadIconW")
	procLoadCursorW          = moduser32.NewProc("LoadCursorW")
	procRegisterClassExW     = moduser32.NewProc("RegisterClassExW")
	procDestroyWindow        = moduser32.NewProc("DestroyWindow")
	procPostQuitMessage      = moduser32.NewProc("PostQuitMessage")
	procDefWindowProcW       = moduser32.NewProc("DefWindowProcW")
	procUpdateWindow         = moduser32.NewProc("UpdateWindow")
	procPostMessageW         = moduser32.NewProc("PostMessageW")
	procGetAncestor          = moduser32.NewProc("GetAncestor")
	procGetDesktopWindow     = moduser32.NewProc("GetDesktopWindow")
	procSetWindowSubclass    = modcomctl32.NewProc("SetWindowSubclass")
	procDefSubclassProc      = modcomctl32.NewProc("DefSubclassProc")
	procRemoveWindowSubclass = modcomctl32.NewProc("RemoveWindowSubclass")
	procBeginPaint           = moduser32.NewProc("BeginPaint")
	procEndPaint             = moduser32.NewProc("EndPaint")
	procTextOutW             = modgdi32.NewProc("TextOutW")
	procSetTextColor         = modgdi32.NewProc("SetTextColor")
	procSetBkColor           = modgdi32.NewProc("SetBkColor")
	procSelectObject         = modgdi32.NewProc("SelectObject")
	procCreateFontIndirectW  = modgdi32.NewProc("CreateFontIndirectW")
	procDeleteObject         = modgdi32.NewProc("DeleteObject")
)

func (t *Thread) GetModuleHandle(modname *uint16) (handle syscall.Handle, err error) {
	r0, _, e1 := t.syscall(procGetModuleHandleW.Addr(), []uintptr{uintptr(unsafe.Pointer(modname))})
	handle = syscall.Handle(r0)
	if handle == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) CreateWindowEx(exstyle uint32, classname *uint16, windowname *uint16, style uint32, x int32, y int32, width int32, height int32, wndparent syscall.Handle, menu syscall.Handle, instance syscall.Handle, param uintptr) (hwnd syscall.Handle, err error) {
	r0, _, e1 := t.syscall(procCreateWindowExW.Addr(), []uintptr{uintptr(exstyle), uintptr(unsafe.Pointer(classname)), uintptr(unsafe.Pointer(windowname)), uintptr(style), uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(wndparent), uintptr(menu), uintptr(instance), uintptr(param)})
	hwnd = syscall.Handle(r0)
	if hwnd == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) GetCursorPos(point *winapi.Point) (err error) {
	r1, _, e1 := t.syscall(procGetCursorPos.Addr(), []uintptr{uintptr(unsafe.Pointer(point))})
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) GetClientRect(hwnd syscall.Handle, rect *winapi.Rect) (err error) {
	r1, _, e1 := t.syscall(procGetClientRect.Addr(), []uintptr{uintptr(hwnd), uintptr(unsafe.Pointer(rect))})
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) GetWindowRect(hwnd syscall.Handle, rect *winapi.Rect) (err error) {
	r1, _, e1 := t.syscall(procGetWindowRect.Addr(), []uintptr{uintptr(hwnd), uintptr(unsafe.Pointer(rect))})
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) MoveWindow(hwnd syscall.Handle, x int32, y int32, w int32, h int32, repaint bool) (err error) {
	var _p0 uint32
	if repaint {
		_p0 = 1
	} else {
		_p0 = 0
	}
	r1, _, e1 := t.syscall(procMoveWindow.Addr(), []uintptr{uintptr(hwnd), uintptr(x), uintptr(y), uintptr(w), uintptr(h), uintptr(_p0)})
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) InvalidateRect(hwnd syscall.Handle, rect *winapi.Rect, erase bool) (err error) {
	var _p0 uint32
	if erase {
		_p0 = 1
	} else {
		_p0 = 0
	}
	r1, _, e1 := t.syscall(procInvalidateRect.Addr(), []uintptr{uintptr(hwnd), uintptr(unsafe.Pointer(rect)), uintptr(_p0)})
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) MapWindowPoints(from syscall.Handle, to syscall.Handle, points *winapi.Point, count uint32) (err error) {
	r1, _, e1 := t.syscall(procMapWindowPoints.Addr(), []uintptr{uintptr(from), uintptr(to), uintptr(unsafe.Pointer(points)), uintptr(count)})
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) GetWindowText(hwnd syscall.Handle, str *uint16, maxCount int32) (len int32, err error) {
	r0, _, e1 := t.syscall(procGetWindowTextW.Addr(), []uintptr{uintptr(hwnd), uintptr(unsafe.Pointer(str)), uintptr(maxCount)})
	len = int32(r0)
	if len == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) GetWindowTextLength(hwnd syscall.Handle) (len int32, err error) {
	r0, _, e1 := t.syscall(procGetWindowTextLengthW.Addr(), []uintptr{uintptr(hwnd)})
	len = int32(r0)
	if len == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) SetWindowText(hwnd syscall.Handle, str *uint16) (err error) {
	r1, _, e1 := t.syscall(procSetWindowTextW.Addr(), []uintptr{uintptr(hwnd), uintptr(unsafe.Pointer(str))})
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) EnableWindow(hwnd syscall.Handle, enable bool) (wasenabled bool) {
	var _p0 uint32
	if enable {
		_p0 = 1
	} else {
		_p0 = 0
	}
	r0, _, _ := t.syscall(procEnableWindow.Addr(), []uintptr{uintptr(hwnd), uintptr(_p0)})
	wasenabled = bool(r0 != 0)
	return
}

func (t *Thread) IsWindowEnabled(hwnd syscall.Handle) (enabled bool) {
	r0, _, _ := t.syscall(procIsWindowEnabled.Addr(), []uintptr{uintptr(hwnd)})
	enabled = bool(r0 != 0)
	return
}

func (t *Thread) ShowWindow(hwnd syscall.Handle, cmdshow int32) (wasvisible bool) {
	r0, _, _ := t.syscall(procShowWindow.Addr(), []uintptr{uintptr(hwnd), uintptr(cmdshow)})
	wasvisible = bool(r0 != 0)
	return
}

func (t *Thread) IsWindowVisible(hwnd syscall.Handle) (visible bool) {
	r0, _, _ := t.syscall(procIsWindowVisible.Addr(), []uintptr{uintptr(hwnd)})
	visible = bool(r0 != 0)
	return
}

func (t *Thread) LoadIcon(instance syscall.Handle, iconname *uint16) (icon syscall.Handle, err error) {
	r0, _, e1 := t.syscall(procLoadIconW.Addr(), []uintptr{uintptr(instance), uintptr(unsafe.Pointer(iconname))})
	icon = syscall.Handle(r0)
	if icon == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) LoadCursor(instance syscall.Handle, cursorname *uint16) (cursor syscall.Handle, err error) {
	r0, _, e1 := t.syscall(procLoadCursorW.Addr(), []uintptr{uintptr(instance), uintptr(unsafe.Pointer(cursorname))})
	cursor = syscall.Handle(r0)
	if cursor == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) RegisterClassEx(wndclass *winapi.Wndclassex) (atom uint16, err error) {
	r0, _, e1 := t.syscall(procRegisterClassExW.Addr(), []uintptr{uintptr(unsafe.Pointer(wndclass))})
	atom = uint16(r0)
	if atom == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) DestroyWindow(hwnd syscall.Handle) (err error) {
	r1, _, e1 := t.syscall(procDestroyWindow.Addr(), []uintptr{uintptr(hwnd)})
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) PostQuitMessage(exitcode int32) {
	t.syscall(procPostQuitMessage.Addr(), []uintptr{uintptr(exitcode)})
	return
}

func (t *Thread) DefWindowProc(hwnd syscall.Handle, msg uint32, wparam uintptr, lparam uintptr) (lresult uintptr) {
	r0, _, _ := t.syscall(procDefWindowProcW.Addr(), []uintptr{uintptr(hwnd), uintptr(msg), uintptr(wparam), uintptr(lparam)})
	lresult = uintptr(r0)
	return
}

func (t *Thread) UpdateWindow(hwnd syscall.Handle) (err error) {
	r1, _, e1 := t.syscall(procUpdateWindow.Addr(), []uintptr{uintptr(hwnd)})
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) PostMessage(hwnd syscall.Handle, msg uint32, wparam uintptr, lparam uintptr) (err error) {
	r1, _, e1 := t.syscall(procPostMessageW.Addr(), []uintptr{uintptr(hwnd), uintptr(msg), uintptr(wparam), uintptr(lparam)})
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) GetAncestor(hwnd syscall.Handle, flags uint32) (ancestor syscall.Handle) {
	r0, _, _ := t.syscall(procGetAncestor.Addr(), []uintptr{uintptr(hwnd), uintptr(flags)})
	ancestor = syscall.Handle(r0)
	return
}

func (t *Thread) GetDesktopWindow() (desktop syscall.Handle) {
	r0, _, _ := t.syscall(procGetDesktopWindow.Addr(), []uintptr{})
	desktop = syscall.Handle(r0)
	return
}

func (t *Thread) SetWindowSubclass(hwnd syscall.Handle, fn uintptr, id uintptr, refData *uint32) (err error) {
	r1, _, e1 := t.syscall(procSetWindowSubclass.Addr(), []uintptr{uintptr(hwnd), uintptr(fn), uintptr(id), uintptr(unsafe.Pointer(refData))})
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) DefSubclassProc(hwnd syscall.Handle, msg uint32, wparam uintptr, lparam uintptr) (lresult uintptr) {
	r0, _, _ := t.syscall(procDefSubclassProc.Addr(), []uintptr{uintptr(hwnd), uintptr(msg), uintptr(wparam), uintptr(lparam)})
	lresult = uintptr(r0)
	return
}

func (t *Thread) RemoveWindowSubclass(hwnd syscall.Handle, fn uintptr, id uintptr) (err error) {
	r1, _, e1 := t.syscall(procRemoveWindowSubclass.Addr(), []uintptr{uintptr(hwnd), uintptr(fn), uintptr(id)})
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) BeginPaint(hwnd syscall.Handle, paint *winapi.PaintStruct) (hdc winapi.HDC, err error) {
	r0, _, e1 := t.syscall(procBeginPaint.Addr(), []uintptr{uintptr(hwnd), uintptr(unsafe.Pointer(paint))})
	hdc = winapi.HDC(r0)
	if hdc == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) EndPaint(hwnd syscall.Handle, paint *winapi.PaintStruct) (err error) {
	r1, _, e1 := t.syscall(procEndPaint.Addr(), []uintptr{uintptr(hwnd), uintptr(unsafe.Pointer(paint))})
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) TextOut(hdc winapi.HDC, x int32, y int32, str *uint16, strlen int32) (err error) {
	r1, _, e1 := t.syscall(procTextOutW.Addr(), []uintptr{uintptr(hdc), uintptr(x), uintptr(y), uintptr(unsafe.Pointer(str)), uintptr(strlen)})
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) SetTextColor(hdc winapi.HDC, color winapi.COLORREF) (prevcolor winapi.COLORREF) {
	r0, _, _ := t.syscall(procSetTextColor.Addr(), []uintptr{uintptr(hdc), uintptr(color)})
	prevcolor = winapi.COLORREF(r0)
	return
}

func (t *Thread) SetBkColor(hdc winapi.HDC, color winapi.COLORREF) (prevcolor winapi.COLORREF) {
	r0, _, _ := t.syscall(procSetBkColor.Addr(), []uintptr{uintptr(hdc), uintptr(color)})
	prevcolor = winapi.COLORREF(r0)
	return
}

func (t *Thread) SelectObject(hdc winapi.HDC, obj syscall.Handle) (handle syscall.Handle, err error) {
	r0, _, e1 := t.syscall(procSelectObject.Addr(), []uintptr{uintptr(hdc), uintptr(obj)})
	handle = syscall.Handle(r0)
	if handle == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) CreateFontIndirect(font *winapi.LOGFONT) (fh syscall.Handle, err error) {
	r0, _, e1 := t.syscall(procCreateFontIndirectW.Addr(), []uintptr{uintptr(unsafe.Pointer(font))})
	fh = syscall.Handle(r0)
	if fh == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func (t *Thread) DeleteObject(obj syscall.Handle) (err error) {
	r1, _, e1 := t.syscall(procDeleteObject.Addr(), []uintptr{uintptr(obj)})
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}
